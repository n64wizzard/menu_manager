/*
 * MenuPanel.java
 *
 * Created on May 23, 2011, 3:34:04 PM
 */
package menumanager;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.util.Vector;
import javax.swing.ComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.event.ListDataListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.tree.ExpandVetoException;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import menumanager.src.DayTreeModel;
import menumanager.src.MealDish;
import menumanager.src.Menu;
import menumanager.src.MenuDay;
import menumanager.src.MenuMeal;
import menumanager.src.dishes.Dish;
import menumanager.src.dishes.Dishes;
import menumanager.src.options.MealName;

/**
 *
 * @author Glenn Ulansey
 */
public class MenuPanel extends javax.swing.JPanel {
	/** Creates new form MenuPanel */
	public MenuPanel() {
		initComponents();
	}
	
	public void updatePanelContents(){
		this.dayPanel.removeAll();
		for(MenuDay menuDay: Menu.getSingletonObject().days()){
			final JTree newDay = new JTree(new DayTreeModel(menuDay));
			newDay.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
			newDay.setShowsRootHandles(true);
			newDay.setPreferredSize(new Dimension(200, 240));
			newDay.setEditable(true);
			newDay.setDragEnabled(true);
			newDay.addMouseListener(new DayTableMouseListener());
			newDay.addKeyListener(new DayTableKeyListener());
			newDay.addTreeWillExpandListener(new TreeWillExpandListener(){
				public void treeWillExpand(TreeExpansionEvent event) throws ExpandVetoException {}
				public void treeWillCollapse(TreeExpansionEvent event) throws ExpandVetoException {
					throw new ExpandVetoException(event);
				}
			});
			
			for(int i = 0; i < newDay.getRowCount(); i++)
				newDay.expandRow(i);
			
			this.dayPanel.add(newDay); 
		}
		
		this.updatePanel();
		this.validate();
		this.repaint();
	}
	
	private void updateMenuDay(JTree day){
		((DayTreeModel)day.getModel()).reload();
		for(int i = 0; i < day.getRowCount(); i++)
			day.expandRow(i);
	}
	
	public void addNewDay(){
		Menu.getSingletonObject().dayIs(new MenuDay("Unnamed Day"));
		this.updatePanelContents();
	}
	
	private JTree selectedDay(){
		for(Component comp: this.dayPanel.getComponents()){
			JTree day = (JTree)comp;
			if(day.getSelectionCount() >= 1)
				return day;
		}
		return null;
	}
	
	// TODO: Copying items across/around/between trees
	// TODO: Add move up/down buttons for meals
	// TODO: Don't prompt to save when loading/creating new menu if no file exists

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuDayMenu = new javax.swing.JPopupMenu();
        newMealMenuItem = new javax.swing.JMenuItem();
        moveDayLeftMenuItem = new javax.swing.JMenuItem();
        moveDayRightMenuItem = new javax.swing.JMenuItem();
        menuMealMenu = new javax.swing.JPopupMenu();
        newDishMenuItem = new javax.swing.JMenuItem();
        addDayButton = new javax.swing.JButton();
        menuScrollPane = new javax.swing.JScrollPane();
        dayPanel = new javax.swing.JPanel();
        editDayNameLabel = new javax.swing.JLabel();
        dayNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        numPeopleTextField = new javax.swing.JTextField();
        mealNameComboBox = new javax.swing.JComboBox();

        menuDayMenu.setName("menuDayMenu"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(menumanager.MenuManagerApp.class).getContext().getResourceMap(MenuPanel.class);
        newMealMenuItem.setText(resourceMap.getString("newMealMenuItem.text")); // NOI18N
        newMealMenuItem.setName("newMealMenuItem"); // NOI18N
        newMealMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMealMenuItemActionPerformed(evt);
            }
        });
        menuDayMenu.add(newMealMenuItem);

        moveDayLeftMenuItem.setText(resourceMap.getString("moveDayLeftMenuItem.text")); // NOI18N
        moveDayLeftMenuItem.setToolTipText(resourceMap.getString("moveDayLeftMenuItem.toolTipText")); // NOI18N
        moveDayLeftMenuItem.setName("moveDayLeftMenuItem"); // NOI18N
        moveDayLeftMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDayLeftMenuItemActionPerformed(evt);
            }
        });
        menuDayMenu.add(moveDayLeftMenuItem);

        moveDayRightMenuItem.setText(resourceMap.getString("moveDayRightMenuItem.text")); // NOI18N
        moveDayRightMenuItem.setName("moveDayRightMenuItem"); // NOI18N
        moveDayRightMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDayRightMenuItemActionPerformed(evt);
            }
        });
        menuDayMenu.add(moveDayRightMenuItem);

        menuMealMenu.setName("menuMealMenu"); // NOI18N

        newDishMenuItem.setText(resourceMap.getString("newDishMenuItem.text")); // NOI18N
        newDishMenuItem.setName("newDishMenuItem"); // NOI18N
        newDishMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDishMenuItemActionPerformed(evt);
            }
        });
        menuMealMenu.add(newDishMenuItem);

        setMaximumSize(new java.awt.Dimension(1000, 300));
        setMinimumSize(new java.awt.Dimension(1000, 300));
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1000, 300));

        addDayButton.setText(resourceMap.getString("addDayButton.text")); // NOI18N
        addDayButton.setName("addDayButton"); // NOI18N
        addDayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDayButtonActionPerformed(evt);
            }
        });

        menuScrollPane.setToolTipText(resourceMap.getString("menuScrollPane.toolTipText")); // NOI18N
        menuScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        menuScrollPane.setName("menuScrollPane"); // NOI18N

        dayPanel.setMaximumSize(new java.awt.Dimension(421, 261));
        dayPanel.setMinimumSize(new java.awt.Dimension(421, 261));
        dayPanel.setName("dayPanel"); // NOI18N
        dayPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dayPanelKeyReleased(evt);
            }
        });
        dayPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 5));
        menuScrollPane.setViewportView(dayPanel);

        editDayNameLabel.setText(resourceMap.getString("editDayNameLabel.text")); // NOI18N
        editDayNameLabel.setName("editDayNameLabel"); // NOI18N

        dayNameTextField.setColumns(10);
        dayNameTextField.setText(resourceMap.getString("dayNameTextField.text")); // NOI18N
        dayNameTextField.setEnabled(false);
        dayNameTextField.setName("dayNameTextField"); // NOI18N
        dayNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dayNameTextFieldKeyReleased(evt);
            }
        });

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setToolTipText(resourceMap.getString("jLabel2.toolTipText")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        deleteButton.setText(resourceMap.getString("deleteButton.text")); // NOI18N
        deleteButton.setEnabled(false);
        deleteButton.setName("deleteButton"); // NOI18N
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        numPeopleTextField.setColumns(5);
        numPeopleTextField.setText(resourceMap.getString("numPeopleTextField.text")); // NOI18N
        numPeopleTextField.setEnabled(false);
        numPeopleTextField.setName("numPeopleTextField"); // NOI18N
        numPeopleTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numPeopleTextFieldKeyReleased(evt);
            }
        });

        mealNameComboBox.setModel(new MealNameComboBoxModel());
        mealNameComboBox.setName("mealNameComboBox"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addDayButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 311, Short.MAX_VALUE)
                .addComponent(editDayNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dayNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numPeopleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mealNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteButton)
                .addContainerGap())
            .addComponent(menuScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(menuScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDayButton)
                    .addComponent(editDayNameLabel)
                    .addComponent(dayNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(deleteButton)
                    .addComponent(numPeopleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mealNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void addDayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDayButtonActionPerformed
		this.addNewDay();
	}//GEN-LAST:event_addDayButtonActionPerformed

	private void newMealMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMealMenuItemActionPerformed
		JTree day = this.selectedDay();
		if(day != null){
			MenuMeal newMeal = new MenuMeal(new MealName("Unnamed Meal"));
			MenuDay menuDay = (MenuDay)day.getSelectionPath().getLastPathComponent();
			menuDay.mealIs(newMeal);
			this.updateMenuDay(day);
		}
	}//GEN-LAST:event_newMealMenuItemActionPerformed

	private void newDishMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDishMenuItemActionPerformed
		JTree day = this.selectedDay();
		if(day != null){
			Object response = JOptionPane.showInputDialog(null, "Choose new Dish:", 
				"Add Dish", JOptionPane.QUESTION_MESSAGE, 
				null, Dishes.getSingletonObject().dishes().toArray(), 
				null);

			if(response != null){
				MealDish newDish = new MealDish(((Dish)response).id());
				MenuMeal menuMeal = (MenuMeal)day.getSelectionPath().getLastPathComponent();
				menuMeal.dishIs(newDish);
				this.updateMenuDay(day);
			}
		}
	}//GEN-LAST:event_newDishMenuItemActionPerformed

	private void dayNameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dayNameTextFieldKeyReleased
		JTree day = this.selectedDay();
		if(day != null){
			MenuDay menuDay = (MenuDay)day.getSelectionPath().getLastPathComponent();
			menuDay.nameIs(this.dayNameTextField.getText());
			this.dayPanel.repaint();
		}
	}//GEN-LAST:event_dayNameTextFieldKeyReleased

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
		this.delete();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void dayPanelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dayPanelKeyReleased
		if(evt.getKeyCode() == KeyEvent.VK_DELETE)
			this.delete();
	}//GEN-LAST:event_dayPanelKeyReleased

	private void moveDayRightMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDayRightMenuItemActionPerformed
		JTree day = this.selectedDay();
		if(day != null){
			MenuDay menuDay = (MenuDay)day.getModel().getRoot();
			Vector<MenuDay> days = Menu.getSingletonObject().days();

			int currentIndex = days.indexOf(menuDay);
			days.remove(currentIndex);
			days.add(days.size() >= currentIndex ? currentIndex + 1 : days.size() - 1, menuDay);

			this.updatePanelContents();
		}
	}//GEN-LAST:event_moveDayRightMenuItemActionPerformed

	private void moveDayLeftMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDayLeftMenuItemActionPerformed
		JTree day = this.selectedDay();
		if(day != null){
			MenuDay menuDay = (MenuDay)day.getModel().getRoot();
			Vector<MenuDay> days = Menu.getSingletonObject().days();

			int currentIndex = days.indexOf(menuDay);
			days.remove(currentIndex);
			days.add(currentIndex > 0 ? currentIndex - 1 : 0, menuDay);

			this.updatePanelContents();
		}
	}//GEN-LAST:event_moveDayLeftMenuItemActionPerformed

	private void numPeopleTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numPeopleTextFieldKeyReleased
		JTree day = this.selectedDay();
		if(day != null){
			MenuDay menuDay = (MenuDay)day.getSelectionPath().getLastPathComponent();

			if(!this.numPeopleTextField.getText().matches("[0-9]{0,3}")){
				Toolkit.getDefaultToolkit().beep();
				this.numPeopleTextField.setText(Integer.toString(menuDay.numPeople()));
			}
			else{
				int newValue = this.numPeopleTextField.getText().equals("") ? 
						0 : Integer.valueOf(this.numPeopleTextField.getText());
				menuDay.numPeopleIs(newValue);
			}
			this.dayPanel.repaint();
		}
	}//GEN-LAST:event_numPeopleTextFieldKeyReleased
	
	private void delete(){
		JTree day = this.selectedDay();
		if(day != null){
			TreePath path = day.getSelectionPath();

			MenuDay menuDay = null;
			MenuMeal menuMeal = null;
			MealDish dish = null;

			if(path.getPathCount() > 0)
				menuDay = (MenuDay)path.getPath()[0];
			if(path.getPathCount() > 1)
				menuMeal = (MenuMeal)path.getPath()[1];
			if(path.getPathCount() > 2)
				dish = (MealDish)path.getPath()[2];

			if(dish != null)
				menuMeal.removeDish(dish);
			else if(menuMeal != null)
				menuDay.removeMeal(menuMeal);
			else if(menuDay != null){
				this.dayPanel.remove(day);
				Menu.getSingletonObject().removeDay(menuDay);
			}

			((DayTreeModel)day.getModel()).reload();
			this.menuScrollPane.updateUI();
			this.dayPanel.validate();
			this.dayPanel.repaint();
			this.updatePanel();
			this.updateMenuDay(day);
		}
	}
	
	private void updatePanel(){
		MenuPanel.this.mealNameComboBox.setEnabled(false);
		MenuPanel.this.dayNameTextField.setEnabled(false);
		MenuPanel.this.numPeopleTextField.setEnabled(false);
		//MenuPanel.this.mealNameTextField.setText("");
		MenuPanel.this.dayNameTextField.setText("");
		MenuPanel.this.numPeopleTextField.setText("");
		MenuPanel.this.deleteButton.setEnabled(false);
		
		JTree day = null;
		for(Component comp: this.dayPanel.getComponents()){
			day = (JTree)comp;

			if(day.getSelectionCount() == 1){
				Object lastNode = day.getSelectionPath().getLastPathComponent();
				if(lastNode.getClass() == MenuDay.class){
					MenuDay menuDay = (MenuDay)lastNode;
					MenuPanel.this.dayNameTextField.setText(menuDay.name());
					MenuPanel.this.numPeopleTextField.setText(String.valueOf(menuDay.numPeople()));
					MenuPanel.this.dayNameTextField.setEnabled(true);
					MenuPanel.this.numPeopleTextField.setEnabled(true);
				}
				else if(lastNode.getClass() == MenuMeal.class){
					MenuMeal menuMeal = (MenuMeal)lastNode;
					//MenuPanel.this.mealNameTextField.setText(menuMeal.mealName());
					MenuPanel.this.mealNameComboBox.setEnabled(true);
				}
				MenuPanel.this.deleteButton.setEnabled(true);
			}
		}
	}
	
	private class DayTableMouseListener extends MouseInputAdapter{
		public void mouseReleased(MouseEvent evt) {
			JTree day = (JTree)evt.getSource();
			TreePath selPath = day.getPathForLocation(evt.getX(), evt.getY());
			if(selPath == null){
				MenuPanel.this.updatePanel();
				return;
			}else{
				MenuPanel.this.resetSelectedTreeNodes();
				day.setSelectionPath(selPath);
				MenuPanel.this.updatePanel();
			}

			if(evt.isPopupTrigger()){
				if(day.getSelectionCount() == 1){
					Object lastNode = day.getSelectionPath().getLastPathComponent();
					if(lastNode.getClass() == MenuDay.class)
						menuDayMenu.show((Component)evt.getSource(), evt.getX(), evt.getY());
					else if(lastNode.getClass() == MenuMeal.class)
						menuMealMenu.show((Component)evt.getSource(), evt.getX(), evt.getY());
				}
			}
		}
	}
	private class DayTableKeyListener implements KeyListener {
		public DayTableKeyListener() {}
		public void keyTyped(KeyEvent e) {}
		public void keyPressed(KeyEvent e) {}

		public void keyReleased(KeyEvent evt) {
			if(evt.getKeyCode() == KeyEvent.VK_DELETE)
				MenuPanel.this.delete();
		}
	}
	
	public class MealNameComboBoxModel implements ComboBoxModel {
		private Vector<ListDataListener> listeners_;

		public MealNameComboBoxModel(){
			this.listeners_ = new Vector();
		}

		public void setSelectedItem(Object anItem) {
			JTree day = MenuPanel.this.selectedDay();
			if(day != null){
				Object lastNode = MenuPanel.this.selectedDay().getSelectionPath().getLastPathComponent();
				if(lastNode.getClass() == MenuMeal.class){
					MenuMeal menuMeal = (MenuMeal)lastNode;
					menuMeal.mealNameIs((MealName)anItem);
				}
			}
		}

		public Object getSelectedItem() {
			JTree day = MenuPanel.this.selectedDay();
			if(day != null){
				Object lastNode = MenuPanel.this.selectedDay().getSelectionPath().getLastPathComponent();
				if(lastNode.getClass() == MenuMeal.class){
					MenuMeal menuMeal = (MenuMeal)lastNode;
					return menuMeal.mealName();
				}
			}
			return new MealName("");
		}

		public int getSize() {
			return MealName.mealNameCount();
		}

		public Object getElementAt(int index) {
			return MealName.mealName(index);
		}

		public void addListDataListener(ListDataListener l) {
			this.listeners_.add(l);
		}

		public void removeListDataListener(ListDataListener l) {
			this.listeners_.remove(l);
		}
	}
	
	private void resetSelectedTreeNodes(){
		for(Component comp: this.dayPanel.getComponents()){
			JTree dayTree = (JTree)comp;
			dayTree.setSelectionPath(null);
		}
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDayButton;
    private javax.swing.JTextField dayNameTextField;
    private javax.swing.JPanel dayPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel editDayNameLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox mealNameComboBox;
    private javax.swing.JPopupMenu menuDayMenu;
    private javax.swing.JPopupMenu menuMealMenu;
    private javax.swing.JScrollPane menuScrollPane;
    private javax.swing.JMenuItem moveDayLeftMenuItem;
    private javax.swing.JMenuItem moveDayRightMenuItem;
    private javax.swing.JMenuItem newDishMenuItem;
    private javax.swing.JMenuItem newMealMenuItem;
    private javax.swing.JTextField numPeopleTextField;
    // End of variables declaration//GEN-END:variables
}
