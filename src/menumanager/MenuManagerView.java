/*
 * MenuManagerView.java
 */

package menumanager;

import java.awt.CardLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.EventObject;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import menumanager.src.LoadData;
import menumanager.src.Menu;
import menumanager.src.Reports;
import menumanager.src.SaveData;
import org.jdesktop.application.Application;

/**
 * The application's main frame.
 */
public class MenuManagerView extends FrameView {
	private File openFile_;

    public MenuManagerView(SingleFrameApplication app) {
        super(app);
        initComponents();
		this.getFrame().setResizable(false);
		this.openFile_ = null;
		
		((CardLayout)this.mainPanel.getLayout()).show(this.mainPanel, "menuPanel");
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = MenuManagerApp.getApplication().getMainFrame();
            aboutBox = new MenuManagerAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        MenuManagerApp.getApplication().show(aboutBox);
    }
	
	private void updateAllPanes(){
		this.ingredientsPanel.updatePanelContents();
		this.dishesPanel.updatePanelContents();
		this.optionsPanel.updatePanelContents();
		this.menuPanel.updatePanelContents();
	}
	
	/// @return False if the save was cancelled
	private boolean saveAsMenu(){
		JFileChooser chooser = new JFileChooser(new File ("."));
		chooser.setSelectedFile(new File("./.xml"));
		chooser.setFileFilter(new XMLFileFilter());
		int returnVal = chooser.showSaveDialog(this.mainPanel);
		if(returnVal != JFileChooser.APPROVE_OPTION)
			return false;			
		File file = chooser.getSelectedFile();
		
		this.getFrame().setTitle("Menu Manager - " + file.getName());
		
		this.openFile_ = file;
		SaveData.SaveData(file);
		return true;
	}
	/// @return False if the save was cancelled
	private boolean saveMenu(){
		if(this.openFile_ == null)
			return this.saveAsMenu();
		else
			SaveData.SaveData(this.openFile_);
		
		return true;
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        dishesPanel = new menumanager.DishesPanel();
        ingredientsPanel = new menumanager.IngredientsPanel();
        menuPanel = new menumanager.MenuPanel();
        optionsPanel = new menumanager.OptionsPanel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        loadMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        rectifyMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        reportMenu = new javax.swing.JMenu();
        createShoppingListMenuItem = new javax.swing.JMenuItem();
        createDirectionsMenuItem = new javax.swing.JMenuItem();
        windowMenu = new javax.swing.JMenu();
        menuWindowMenuItem = new javax.swing.JMenuItem();
        dishesWindowMenuItem = new javax.swing.JMenuItem();
        ingredientsWindowMenuItem = new javax.swing.JMenuItem();
        optionsWindowMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setRequestFocusEnabled(false);
        mainPanel.setLayout(new java.awt.CardLayout());

        dishesPanel.setName("dishesPanel"); // NOI18N
        mainPanel.add(dishesPanel, "dishesPanel");

        ingredientsPanel.setName("ingredientsPanel"); // NOI18N
        mainPanel.add(ingredientsPanel, "ingredientsPanel");

        menuPanel.setName("menuPanel"); // NOI18N
        mainPanel.add(menuPanel, "menuPanel");

        optionsPanel.setName("optionsPanel"); // NOI18N
        mainPanel.add(optionsPanel, "optionsPanel");

        menuBar.setName("menuBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(menumanager.MenuManagerApp.class).getContext().getResourceMap(MenuManagerView.class);
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        newMenuItem.setText(resourceMap.getString("newMenuItem.text")); // NOI18N
        newMenuItem.setName("newMenuItem"); // NOI18N
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        loadMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        loadMenuItem.setText(resourceMap.getString("loadMenuItem.text")); // NOI18N
        loadMenuItem.setName("loadMenuItem"); // NOI18N
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText(resourceMap.getString("saveMenuItem.text")); // NOI18N
        saveMenuItem.setName("saveMenuItem"); // NOI18N
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setText(resourceMap.getString("saveAsMenuItem.text")); // NOI18N
        saveAsMenuItem.setName("saveAsMenuItem"); // NOI18N
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        jSeparator1.setName("jSeparator1"); // NOI18N
        fileMenu.add(jSeparator1);

        rectifyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        rectifyMenuItem.setText(resourceMap.getString("rectifyMenuItem.text")); // NOI18N
        rectifyMenuItem.setEnabled(false);
        rectifyMenuItem.setName("rectifyMenuItem"); // NOI18N
        fileMenu.add(rectifyMenuItem);

        jSeparator3.setName("jSeparator3"); // NOI18N
        fileMenu.add(jSeparator3);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(menumanager.MenuManagerApp.class).getContext().getActionMap(MenuManagerView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText(resourceMap.getString("editMenu.text")); // NOI18N
        editMenu.setName("editMenu"); // NOI18N

        cutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMenuItem.setText(resourceMap.getString("cutMenuItem.text")); // NOI18N
        cutMenuItem.setName("cutMenuItem"); // NOI18N
        editMenu.add(cutMenuItem);

        copyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyMenuItem.setText(resourceMap.getString("copyMenuItem.text")); // NOI18N
        copyMenuItem.setName("copyMenuItem"); // NOI18N
        editMenu.add(copyMenuItem);

        pasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteMenuItem.setText(resourceMap.getString("pasteMenuItem.text")); // NOI18N
        pasteMenuItem.setName("pasteMenuItem"); // NOI18N
        editMenu.add(pasteMenuItem);

        menuBar.add(editMenu);

        reportMenu.setText(resourceMap.getString("reportMenu.text")); // NOI18N
        reportMenu.setName("reportMenu"); // NOI18N

        createShoppingListMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        createShoppingListMenuItem.setText(resourceMap.getString("createShoppingListMenuItem.text")); // NOI18N
        createShoppingListMenuItem.setName("createShoppingListMenuItem"); // NOI18N
        createShoppingListMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createShoppingListMenuItemActionPerformed(evt);
            }
        });
        reportMenu.add(createShoppingListMenuItem);

        createDirectionsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        createDirectionsMenuItem.setText(resourceMap.getString("createDirectionsMenuItem.text")); // NOI18N
        createDirectionsMenuItem.setName("createDirectionsMenuItem"); // NOI18N
        createDirectionsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDirectionsMenuItemActionPerformed(evt);
            }
        });
        reportMenu.add(createDirectionsMenuItem);

        menuBar.add(reportMenu);

        windowMenu.setText(resourceMap.getString("windowMenu.text")); // NOI18N
        windowMenu.setName("windowMenu"); // NOI18N

        menuWindowMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        menuWindowMenuItem.setText(resourceMap.getString("menuWindowMenuItem.text")); // NOI18N
        menuWindowMenuItem.setName("menuWindowMenuItem"); // NOI18N
        menuWindowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuWindowMenuItemActionPerformed(evt);
            }
        });
        windowMenu.add(menuWindowMenuItem);

        dishesWindowMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        dishesWindowMenuItem.setText(resourceMap.getString("dishesWindowMenuItem.text")); // NOI18N
        dishesWindowMenuItem.setName("dishesWindowMenuItem"); // NOI18N
        dishesWindowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dishesWindowMenuItemActionPerformed(evt);
            }
        });
        windowMenu.add(dishesWindowMenuItem);

        ingredientsWindowMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        ingredientsWindowMenuItem.setText(resourceMap.getString("ingredientsWindowMenuItem.text")); // NOI18N
        ingredientsWindowMenuItem.setName("ingredientsWindowMenuItem"); // NOI18N
        ingredientsWindowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingredientsWindowMenuItemActionPerformed(evt);
            }
        });
        windowMenu.add(ingredientsWindowMenuItem);

        optionsWindowMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        optionsWindowMenuItem.setText(resourceMap.getString("optionsWindowMenuItem.text")); // NOI18N
        optionsWindowMenuItem.setName("optionsWindowMenuItem"); // NOI18N
        optionsWindowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsWindowMenuItemActionPerformed(evt);
            }
        });
        windowMenu.add(optionsWindowMenuItem);

        menuBar.add(windowMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

	private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed
		int confirmValue = JOptionPane.showConfirmDialog(null,
			"Save current menu before loading?",
			"Confirm Load", JOptionPane.YES_NO_OPTION);
		if(confirmValue == JOptionPane.YES_OPTION)
			this.saveMenuItemActionPerformed(evt);
		
		JFileChooser chooser = new JFileChooser(new File ("."));
		chooser.setFileFilter(new XMLFileFilter());
		int returnVal = chooser.showOpenDialog(this.mainPanel);
		if(returnVal != JFileChooser.APPROVE_OPTION)
			return ;			
		File file = chooser.getSelectedFile();
		new LoadData(file.getAbsolutePath(), true);
		this.openFile_ = file;
		
		this.getFrame().setTitle("Menu Manager - " + file.getName());
		
		this.updateAllPanes();
	}//GEN-LAST:event_loadMenuItemActionPerformed

	private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
		this.saveMenu();
	}//GEN-LAST:event_saveMenuItemActionPerformed

	private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
		this.saveAsMenu();
	}//GEN-LAST:event_saveAsMenuItemActionPerformed

	private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
		int confirmValue = JOptionPane.showConfirmDialog(null,
			"Save current menu before creating a new menu?",
			"Confirm New", JOptionPane.YES_NO_OPTION);
		if(confirmValue == JOptionPane.YES_OPTION)
			if(!this.saveMenu())
				return ;
		
		LoadData.clearData();
		this.openFile_ = null;
		this.updateAllPanes();
	}//GEN-LAST:event_newMenuItemActionPerformed

	private void createShoppingListMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createShoppingListMenuItemActionPerformed
		String fileName = this.openFile_ != null ? this.openFile_.getName() : "Unnamed Menu";
		if(fileName.endsWith(".xml"))
			fileName = fileName.substring(0, fileName.length() - 4);
		
		DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy HHmm");
        Date date = new Date();
        String currentDate = dateFormat.format(date);
		
		JFileChooser chooser = new JFileChooser(new File ("."));
		chooser.setSelectedFile(new File("./" + fileName + " Shopping List (" + currentDate + ").pdf"));
		chooser.setFileFilter(new PDFFileFilter());
		int returnVal = chooser.showSaveDialog(this.mainPanel);
		if(returnVal != JFileChooser.APPROVE_OPTION)
			return ;			
		File file = chooser.getSelectedFile();
		
		Reports.createShoppingList(fileName, Menu.getSingletonObject().days(), file);
	}//GEN-LAST:event_createShoppingListMenuItemActionPerformed

	private void createDirectionsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDirectionsMenuItemActionPerformed
		String fileName = this.openFile_ != null ? this.openFile_.getName() : "Unnamed Menu";
		if(fileName.endsWith(".xml"))
			fileName = fileName.substring(0, fileName.length() - 4);
		
		DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy HHmm");
        Date date = new Date();
        String currentDate = dateFormat.format(date);
		
		JFileChooser chooser = new JFileChooser(new File ("."));
		chooser.setSelectedFile(new File("./" + fileName + " Cooking Directions (" + currentDate + ").pdf"));
		chooser.setFileFilter(new PDFFileFilter());
		int returnVal = chooser.showSaveDialog(this.mainPanel);
		if(returnVal != JFileChooser.APPROVE_OPTION)
			return ;			
		File file = chooser.getSelectedFile();
		
		Reports.createDailyDirections(fileName, Menu.getSingletonObject().days(), file);
	}//GEN-LAST:event_createDirectionsMenuItemActionPerformed

	private void dishesWindowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dishesWindowMenuItemActionPerformed
		((CardLayout)this.mainPanel.getLayout()).show(this.mainPanel, "dishesPanel");
	}//GEN-LAST:event_dishesWindowMenuItemActionPerformed

	private void ingredientsWindowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingredientsWindowMenuItemActionPerformed
		((CardLayout)this.mainPanel.getLayout()).show(this.mainPanel, "ingredientsPanel");
	}//GEN-LAST:event_ingredientsWindowMenuItemActionPerformed

	private void optionsWindowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsWindowMenuItemActionPerformed
		((CardLayout)this.mainPanel.getLayout()).show(this.mainPanel, "optionsPanel");
	}//GEN-LAST:event_optionsWindowMenuItemActionPerformed

	private void menuWindowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuWindowMenuItemActionPerformed
		((CardLayout)this.mainPanel.getLayout()).show(this.mainPanel, "menuPanel");
	}//GEN-LAST:event_menuWindowMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem createDirectionsMenuItem;
    private javax.swing.JMenuItem createShoppingListMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private menumanager.DishesPanel dishesPanel;
    private javax.swing.JMenuItem dishesWindowMenuItem;
    private javax.swing.JMenu editMenu;
    private menumanager.IngredientsPanel ingredientsPanel;
    private javax.swing.JMenuItem ingredientsWindowMenuItem;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private menumanager.MenuPanel menuPanel;
    private javax.swing.JMenuItem menuWindowMenuItem;
    private javax.swing.JMenuItem newMenuItem;
    private menumanager.OptionsPanel optionsPanel;
    private javax.swing.JMenuItem optionsWindowMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem rectifyMenuItem;
    private javax.swing.JMenu reportMenu;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenu windowMenu;
    // End of variables declaration//GEN-END:variables

    private JDialog aboutBox;

	public boolean promptForExit() {
		if(this.openFile_ == null)
			return true;
		
		int confirmValue = JOptionPane.showConfirmDialog(null,
			"Save current menu before exiting?",
			"Confirm Exit", JOptionPane.YES_NO_CANCEL_OPTION);
		if(confirmValue == JOptionPane.YES_OPTION){
			if(!this.saveMenu())
				return false;
		}
		else if(confirmValue == JOptionPane.CANCEL_OPTION)
			return false;
		else if(confirmValue == JOptionPane.NO_OPTION)
			return true;
		
		return true;
	}
}
