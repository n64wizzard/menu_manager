/*
 * DishesPanel.java
 *
 * Created on May 23, 2011, 2:10:53 PM
 */
package menumanager;

import java.awt.Component;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.Random;
import java.util.Vector;
import javax.swing.*;
import javax.swing.table.*;
import menumanager.src.dishes.Dish;
import menumanager.src.dishes.DishIngredient;
import menumanager.src.dishes.DishIngredientTableModel;
import menumanager.src.dishes.DishListModel;
import menumanager.src.dishes.Dishes;
import menumanager.src.ingredients.Ingredient;
import menumanager.src.ingredients.Ingredients;

/**
 *
 * @author Glenn Ulansey
 */
public class DishesPanel extends javax.swing.JPanel {

	/** Creates new form DishesPanel */
	public DishesPanel() {
		initComponents();
	}
	
	public void addNewDish(){		
		Dish dish = new Dish(new Dish.ID((new Random()).nextInt(100000000)));
		dish.empty();
		Dishes.getSingletonObject().dishIs(dish);
		this.updatePanelContents();
	}
	
	public void updatePanelContents(){
		DishListModel model = (DishListModel)this.dishList.getModel();
		model.updateList();
		
		int selectedIndex = this.dishList.getSelectedIndex();
		boolean enableButtons = selectedIndex != -1 && selectedIndex < model.getSize();

		this.addIngredientButton.setEnabled(enableButtons);
		this.deleteDishButton.setEnabled(enableButtons);
		
		if(enableButtons){
			Dish selectedDish = Dishes.getSingletonObject().dish(selectedIndex);
			this.DishDescriptionField.setText(selectedDish.description());
			this.dishInstructionsField.setText(selectedDish.instructions());
		}
		else{
			this.DishDescriptionField.setText("Description/Comments...");
			this.dishInstructionsField.setText("Preparation Instructions...");
		}
		
		DishIngredientTableModel tm = (DishIngredientTableModel)this.dishIngredientTable.getModel();
		if(!enableButtons)
			tm.currentDishIs(null);
		tm.fireTableStructureChanged();
		
		this.deleteIngredientButton.setEnabled(this.dishIngredientTable.getSelectedRowCount() == 1);
	}
	
	private void deleteDish(){
		int[] selectedRows = this.dishList.getSelectedIndices();
		for(int i = 0; i < selectedRows.length; i++){
			int confirmValue = JOptionPane.showConfirmDialog(null,
				"Are you sure you want delete â€“ " + this.dishList.getSelectedValue().toString() + "?",
				"Confirm Deletion", JOptionPane.OK_CANCEL_OPTION);
			if(confirmValue == -1 || confirmValue == 2)
				return ;

			Dishes.getSingletonObject().removeDish(selectedRows[i]);
			this.updatePanelContents();
			break;
		}
	}
	
	private void addNewDishIngredient(){
		int selectedIndex = this.dishList.getSelectedIndex();
		if(selectedIndex == -1)
			return ;
		
		Vector<Ingredient> ingredients = (Vector<Ingredient>)Ingredients.getSingletonObject().ingredients();
		Object response = JOptionPane.showInputDialog(null, "Choose Ingredient:", 
			"Add Dish Ingredient", JOptionPane.QUESTION_MESSAGE, 
			null, ingredients.toArray(), 
			null);
		
		if(response != null){
			DishIngredient ingredient = new DishIngredient(((Ingredient)response).id());
			Dishes.getSingletonObject().dish(selectedIndex).ingredientIs(ingredient);
			this.updatePanelContents();
		}
	}
	
	private void editDishName(){
		int selectedIndex = this.dishList.getSelectedIndex();
		if(selectedIndex == -1)
			return ;

		Object response = JOptionPane.showInputDialog(null, "Enter new Dish Name:", 
				"Edit Dish Name", JOptionPane.QUESTION_MESSAGE, 
				null, null, this.dishList.getSelectedValue().toString());
		
		if(response != null){
			Dishes.getSingletonObject().dish(selectedIndex).nameIs((String)response);
			this.updatePanelContents();
		}
	}
	
	private void deleteDishIngredient(){
		int selectedIndex = this.dishList.getSelectedIndex();
		int ingredientRow = this.dishIngredientTable.getSelectedRow();
		
		if(selectedIndex != -1 && ingredientRow != -1){
			Dish selectedDish = Dishes.getSingletonObject().dish(selectedIndex);
			selectedDish.ingredientRemove(ingredientRow);
			this.updatePanelContents();
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dishPopupMenu = new javax.swing.JPopupMenu();
        editDishNameMenuItem = new javax.swing.JMenuItem();
        dishIngredientsPane = new javax.swing.JScrollPane();
        dishIngredientTable = new javax.swing.JTable();
        dishesScrollPane = new javax.swing.JScrollPane();
        dishList = new javax.swing.JList();
        descriptionScrollPane = new javax.swing.JScrollPane();
        DishDescriptionField = new javax.swing.JTextArea();
        instructionsScrollPane = new javax.swing.JScrollPane();
        dishInstructionsField = new javax.swing.JTextArea();
        newDishButton = new javax.swing.JButton();
        addIngredientButton = new javax.swing.JButton();
        deleteDishButton = new javax.swing.JButton();
        deleteIngredientButton = new javax.swing.JButton();

        dishPopupMenu.setName("dishPopupMenu"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(menumanager.MenuManagerApp.class).getContext().getResourceMap(DishesPanel.class);
        editDishNameMenuItem.setText(resourceMap.getString("editDishNameMenuItem.text")); // NOI18N
        editDishNameMenuItem.setName("editDishNameMenuItem"); // NOI18N
        editDishNameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDishNameMenuItemActionPerformed(evt);
            }
        });
        dishPopupMenu.add(editDishNameMenuItem);

        setMaximumSize(new java.awt.Dimension(1000, 300));
        setMinimumSize(new java.awt.Dimension(1000, 300));
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1000, 300));

        dishIngredientsPane.setName("dishIngredientsPane"); // NOI18N

        dishIngredientTable.setModel(new DishIngredientTableModel());
        dishIngredientTable.setName("dishIngredientTable"); // NOI18N
        dishIngredientTable.getTableHeader().setReorderingAllowed(false);
        dishIngredientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                dishIngredientTableMouseReleased(evt);
            }
        });
        dishIngredientTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dishIngredientTableKeyReleased(evt);
            }
        });
        dishIngredientsPane.setViewportView(dishIngredientTable);
        dishIngredientTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("dishIngredientTable.columnModel.title0")); // NOI18N
        dishIngredientTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("dishIngredientTable.columnModel.title1")); // NOI18N
        dishIngredientTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("dishIngredientTable.columnModel.title2")); // NOI18N
        // Create the combo box editor
        String[] validStates = {"On order", "In stock", "Out of print"};
        JComboBox comboBox = new JComboBox(validStates);

        DefaultCellEditor editor = new DefaultCellEditor(comboBox);

        // Assign the editor to the second column
        TableColumnModel tcm = dishIngredientTable.getColumnModel();
        tcm.getColumn(0).setCellEditor(editor);

        dishesScrollPane.setName("dishesScrollPane"); // NOI18N

        dishList.setModel(new DishListModel());
        dishList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dishList.setDragEnabled(true);
        dishList.setName("dishList"); // NOI18N
        dishList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dishListMouseClicked(evt);
            }
        });
        dishList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dishListValueChanged(evt);
            }
        });
        dishList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dishListKeyReleased(evt);
            }
        });
        dishesScrollPane.setViewportView(dishList);

        descriptionScrollPane.setName("descriptionScrollPane"); // NOI18N

        DishDescriptionField.setColumns(20);
        DishDescriptionField.setLineWrap(true);
        DishDescriptionField.setRows(2);
        DishDescriptionField.setText(resourceMap.getString("dishDescriptionField.text")); // NOI18N
        DishDescriptionField.setToolTipText(resourceMap.getString("dishDescriptionField.toolTipText")); // NOI18N
        DishDescriptionField.setMaximumSize(null);
        DishDescriptionField.setName("dishDescriptionField"); // NOI18N
        DishDescriptionField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                DishDescriptionFieldFocusLost(evt);
            }
        });
        DishDescriptionField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                DishDescriptionFieldKeyReleased(evt);
            }
        });
        descriptionScrollPane.setViewportView(DishDescriptionField);

        instructionsScrollPane.setName("instructionsScrollPane"); // NOI18N

        dishInstructionsField.setColumns(20);
        dishInstructionsField.setLineWrap(true);
        dishInstructionsField.setRows(5);
        dishInstructionsField.setText(resourceMap.getString("dishInstructionsField.text")); // NOI18N
        dishInstructionsField.setToolTipText(resourceMap.getString("dishInstructionsField.toolTipText")); // NOI18N
        dishInstructionsField.setName("dishInstructionsField"); // NOI18N
        dishInstructionsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dishInstructionsFieldFocusLost(evt);
            }
        });
        dishInstructionsField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dishInstructionsFieldKeyReleased(evt);
            }
        });
        instructionsScrollPane.setViewportView(dishInstructionsField);

        newDishButton.setText(resourceMap.getString("newDishButton.text")); // NOI18N
        newDishButton.setName("newDishButton"); // NOI18N
        newDishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDishButtonActionPerformed(evt);
            }
        });

        addIngredientButton.setText(resourceMap.getString("addIngredientButton.text")); // NOI18N
        addIngredientButton.setEnabled(false);
        addIngredientButton.setName("addIngredientButton"); // NOI18N
        addIngredientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addIngredientButtonActionPerformed(evt);
            }
        });

        deleteDishButton.setText(resourceMap.getString("deleteDishButton.text")); // NOI18N
        deleteDishButton.setEnabled(false);
        deleteDishButton.setName("deleteDishButton"); // NOI18N
        deleteDishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDishButtonActionPerformed(evt);
            }
        });

        deleteIngredientButton.setText(resourceMap.getString("deleteIngredientButton.text")); // NOI18N
        deleteIngredientButton.setEnabled(false);
        deleteIngredientButton.setName("deleteIngredientButton"); // NOI18N
        deleteIngredientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteIngredientButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dishesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                    .addComponent(instructionsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                    .addComponent(descriptionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dishIngredientsPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newDishButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteDishButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addIngredientButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteIngredientButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(instructionsScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(dishesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(descriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(dishIngredientsPane, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newDishButton)
                            .addComponent(deleteDishButton)
                            .addComponent(deleteIngredientButton)
                            .addComponent(addIngredientButton))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void dishListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dishListValueChanged
		int selectedIndex = this.dishList.getSelectedIndex();
		if(selectedIndex != -1){
			Dish selectedDish = Dishes.getSingletonObject().dish(selectedIndex);
			
			DishIngredientTableModel tm = (DishIngredientTableModel)this.dishIngredientTable.getModel();
			tm.currentDishIs(selectedDish);
			this.updatePanelContents();
		}		
	}//GEN-LAST:event_dishListValueChanged

	private void newDishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDishButtonActionPerformed
		this.addNewDish();
	}//GEN-LAST:event_newDishButtonActionPerformed

	private void deleteDishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDishButtonActionPerformed
		this.deleteDish();
	}//GEN-LAST:event_deleteDishButtonActionPerformed

	private void addIngredientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addIngredientButtonActionPerformed
		this.addNewDishIngredient();
	}//GEN-LAST:event_addIngredientButtonActionPerformed

	private void dishListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dishListKeyReleased
		if(evt.getKeyCode() == KeyEvent.VK_DELETE)
			this.deleteDish();
	}//GEN-LAST:event_dishListKeyReleased

	private void deleteIngredientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteIngredientButtonActionPerformed
		this.deleteDishIngredient();
	}//GEN-LAST:event_deleteIngredientButtonActionPerformed

	private void dishListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dishListMouseClicked
		if(evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1)
			this.editDishName();
		if(evt.getButton() == MouseEvent.BUTTON3){
			this.dishList.setSelectedIndex(this.dishList.locationToIndex(new Point(evt.getX(), evt.getY())));
			this.dishPopupMenu.show((Component)evt.getSource(), evt.getX(), evt.getY());
		}
	}//GEN-LAST:event_dishListMouseClicked

	private void dishIngredientTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dishIngredientTableKeyReleased
		if(evt.getKeyCode() == KeyEvent.VK_DELETE)
			this.deleteDishIngredient();
	}//GEN-LAST:event_dishIngredientTableKeyReleased

	private void dishInstructionsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dishInstructionsFieldFocusLost
		int selectedIndex = this.dishList.getSelectedIndex();
		if(selectedIndex == -1)
			return ;

		Dishes.getSingletonObject().dish(selectedIndex).instructionsIs(this.dishInstructionsField.getText());
	}//GEN-LAST:event_dishInstructionsFieldFocusLost

	private void DishDescriptionFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_DishDescriptionFieldFocusLost
		int selectedIndex = this.dishList.getSelectedIndex();
		if(selectedIndex == -1)
			return ;

		Dishes.getSingletonObject().dish(selectedIndex).descriptionIs(this.DishDescriptionField.getText());
	}//GEN-LAST:event_DishDescriptionFieldFocusLost

	private void DishDescriptionFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DishDescriptionFieldKeyReleased
		this.DishDescriptionFieldFocusLost(null);
	}//GEN-LAST:event_DishDescriptionFieldKeyReleased

	private void dishInstructionsFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dishInstructionsFieldKeyReleased
		this.dishInstructionsFieldFocusLost(null);
	}//GEN-LAST:event_dishInstructionsFieldKeyReleased

	private void editDishNameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDishNameMenuItemActionPerformed
		this.editDishName();
	}//GEN-LAST:event_editDishNameMenuItemActionPerformed

	private void dishIngredientTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dishIngredientTableMouseReleased
		this.deleteIngredientButton.setEnabled(this.dishIngredientTable.getSelectedRowCount() == 1);
	}//GEN-LAST:event_dishIngredientTableMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea DishDescriptionField;
    private javax.swing.JButton addIngredientButton;
    private javax.swing.JButton deleteDishButton;
    private javax.swing.JButton deleteIngredientButton;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTable dishIngredientTable;
    private javax.swing.JScrollPane dishIngredientsPane;
    private javax.swing.JTextArea dishInstructionsField;
    private javax.swing.JList dishList;
    private javax.swing.JPopupMenu dishPopupMenu;
    private javax.swing.JScrollPane dishesScrollPane;
    private javax.swing.JMenuItem editDishNameMenuItem;
    private javax.swing.JScrollPane instructionsScrollPane;
    private javax.swing.JButton newDishButton;
    // End of variables declaration//GEN-END:variables
}
